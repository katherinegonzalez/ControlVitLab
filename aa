
# Callback para actualizar el gráfico de Gauge con la frecuencia cardíaca
@app.callback(
    Output('gauge-graph', 'figure'),
    [Input('search-button', 'n_clicks')],
    [State('search-input', 'value')]
)
def update_gauge(n_clicks, search_value):
    try:
        # Solo ejecutar si se hizo clic en el botón
        if n_clicks > 0 and search_value:
            print('entra: ', search_value)
            sql_query_heart = ("""
                    SELECT frecuencia_cardiaca
                    FROM pacientes.pacientes_vit 
                    WHERE id_cia = %s
                    ORDER BY fecha DESC
                    LIMIT 1
                """)
            print(sql_query_heart)
            cursor.execute(sql_query_heart, search_value)

            # Obtener los resultados de la consulta como una lista de diccionarios
            results = cursor.fetchone()
            heart_rate = results['frecuencia_cardiaca']
            print(heart_rate)
             # Crear el objeto de figura para el gráfico de Gauge
            figure = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = heart_rate,
                title = {'text': "Frecuencia Cardíaca"},
                domain = {'x': [0, 1], 'y': [0, 1]},
                gauge = {
                    'axis': {'range': [None, 100]},
                    'steps' : [
                        {'range': [0, 60], 'color': "lightgray"},
                        {'range': [60, 100], 'color': "gray"}
                    ],
                    'threshold' : {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 80}
                    }
            ))

            return figure  # Devolver la figura del gráfico de Gauge

    except pymysql.Error as e:
        print('Error de MySQL en Heart: ', e)
        return dash.no_update

    else:
        # Si no se ha hecho clic en el botón, no actualizar el gráfico
        return dash.no_update
